<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--  注释扫描  -->
    <context:component-scan base-package="com.mmall" annotation-config="true"/>

    <!--  多常量进行分离到datasource.properties，在配置文件中使用key获取值  -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="2"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <!--  数据库相关配置  -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
        <!-- 连接池启动时的初始值：20-->
        <property name="initialSize" value="${db.initialSize}"/>
        <!-- 连接池的最大值：50-->
        <property name="maxActive" value="${db.maxActive}"/>
        <!-- 连接池的最大空闲值：20，当经过高峰时间后，连接池可以慢慢将已经用不到的连接慢慢的释放
        一部分，一直减少到maxIdle值-->
        <property name="maxIdle" value="${db.maxIdle}"/>
        <!-- 连接池的最小空闲值：10，当空闲的连接数小于阈值时，连接池会预先申请一些连接，以备洪峰
        来时，来不及申请-->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 最大建立连接等待时间：10。如果超过此时间将接到异常，如果设置为-1，表示无限制-->
        <property name="maxWait" value="${db.maxWait}"/>
        <!-- 默认自动提交：true-->
        <property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>
        <!-- 连接超时时间，默认半小时：3600000-->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
        <!-- 失效检查线程运行时间间隔，要小于mysql默认-->
        <property name="timeBetweenEvictionRunsMillis" value="40000"/>
        <!-- 检查连接是否有效-->
        <property name="testWhileIdle" value="true"/>
        <!-- 检查连接有效性的SQL语句-->
        <property name="validationQuery" value="SELECT 1 FROM dual"/>
        <!-- 回收被遗弃的（一般是忘记释放的）数据库连接到连接池中 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 数据库连接过多长时间不用，将被视为被遗弃而收回连接池中-->
        <property name="removeAbandonedTimeout" value="120"/>
    </bean>

    <!--mybatis的SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 这里的dataSource指的就是上面bean的id-->
        <property name="dataSource" ref="dataSource"/>
        <!-- mapper的位置：通过classpath*指定到resource文件夹，把所有sql实现都读取到-->
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>

        <!-- mybatis的分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--mybatis对dao层的扫描-->
    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mmall.dao"/>
    </bean>

    <!--使用@Transactional进行事务管理需要声明下面这行-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!--事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <!--错误回滚-->
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
</beans>